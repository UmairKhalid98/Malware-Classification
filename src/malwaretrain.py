# -*- coding: utf-8 -*-


import csv
import pandas as pd;
import numpy as np;
import matplotlib.pyplot as plt;
from sklearn.svm import SVC;
from sklearn.model_selection import train_test_split
heading = {'family':'serif','color':'Red','size':30}
dataFiles = []
opcodes = []
for i in range(1,21):
  x  = i*5;
  opcodes.append(x);
  dataFiles.append("data"+str(x)+".csv");

cValues= 10;

print(cValues)
# print(targetAccuracy)
plt.rcParams['figure.figsize'] = [20, 7]

maxTargetAccuracy= [];
for i in range(1,4):
  maxTargetAccuracy.append([]);

#Binary Classification 

for data in dataFiles:
  



  kernelPlt = plt;
  cPlt = plt;
  w = 0.2

  
  kernelAcc = [[],[],[],[]]; 
  cAcc = [];  
  cBars =[];
  for i in range(1,cValues): 
    cAcc.append([]);
    cBars.append([]);
  bars = [[],[],[],[]];
  # data.head()
  families = ["winwebsec","zbot","zeroacess"];
  dataname = data;
  print("FILE: "+ data);
  data = pd.read_csv(data);    

  target_winwebsec = data['winwebsec']
  target_zbot = data['zbot']
  target_zeroaccess = data['zeroaccess']
  targets = [target_winwebsec,target_zbot,target_zeroaccess];

  kernels = ['sigmoid', 'linear', 'rbf','poly'];
  myData = data.drop(['winwebsec','zbot','zeroaccess','target'],axis= 'columns');

  
  maxAccuracy = 0.0;
  C = 1;
  bestKernel = kernels[0];
  acc = []
  Cs = []
  for i in range(cValues-1):
    Cs.append(i);


  for target in targets: 
 
    train_x,test_x, train_y, test_y = train_test_split(myData,target,test_size = 0.2, random_state = 60);
    for kernel in kernels:
    
      training = SVC(kernel = kernel)
      training.fit(train_x,train_y)
      Accuracy = training.score(test_x, test_y)*100;
      if Accuracy>maxAccuracy:
        maxAccuracy = Accuracy;
        bestKernel = kernel;


      # plt.scatter(Accuracy,kernel,color ='red', marker = '.')
      # plt.(Accuracy,kernel,color ='red', marker = '.')
      if kernel == "sigmoid":
        kernelAcc[0].append(Accuracy);
      elif kernel == "linear":
        kernelAcc[1].append(Accuracy);
      elif kernel == "rbf":
        kernelAcc[2].append(Accuracy);
      elif kernel == "poly":
        kernelAcc[3].append(Accuracy);
      acc.append(Accuracy);

    acc = [];
    for c in range(len(cAcc)):
      c=c+1;
      training = SVC(kernel = bestKernel,C=c)
      training.fit(train_x,train_y)
      Accuracy = training.score(test_x, test_y)*100;
      Cs.append(c);
      # print(c);
      cAcc[c-1].append(Accuracy);
     
      acc.append(Accuracy);
      if Accuracy>maxAccuracy:
        maxAccuracy = Accuracy;
        C = c;

    print(target.name,': C:',C,' kernel:',bestKernel,'Acc: ',maxAccuracy);
    # maxAcc.append(maxAccuracy);
    
   
    if target.name == "winwebsec":
      maxTargetAccuracy[0].append(maxAccuracy);
    elif target.name == "zeroaccess": 
      maxTargetAccuracy[1].append(maxAccuracy);
    elif target.name == "zbot":
      maxTargetAccuracy[2].append(maxAccuracy);
    maxAccuracy = 0;


  # ---------Kernel graph------------
  kernelPlt.title("Acc of each kernel in each fam of: "+dataname);
  kernelPlt.ylabel("Accuracy")
  kernelPlt.xlabel("Target")
  bar0 = np.arange(len(targets))
  

  
  # print(kernelAcc)
  for i in range(len(bars)):
    # if i == 1:
    #   bars[i]=[x+w for x in bar0]  
      
    if i>=1:
      bars[i] = [x+w for x in bars[i-1]];
    else:
      bars[i]= bar0;
    for a in range(len(kernelAcc[i])):
      kernelPlt.text(bars[i][a],kernelAcc[i][a],round(kernelAcc[i][a],2),ha="center",va = "bottom");
    # print(kernelAcc[i],"kernel")
    # print(bars[i],"bar");
    kernelPlt.bar(bars[i],kernelAcc[i],w,label=kernels[i]);
  
  # kernelPlt.bar(target.name,acc,w,label=kernel);
  kernelPlt.xticks(bar0,families)
  kernelPlt.ylim(70,101);
  kernelPlt.legend(loc  = 'lower right');
  kernelPlt.show()
  kernelAcc = [[],[],[],[]]; 
  maxAcc=0;

# ---------C graph------------
  cPlt.title("Acc of C in each fam of: "+dataname );
  cPlt.ylabel("Accuracy")
  cPlt.xlabel("Target")
  # bar0 = np.arange(cValues);
  # clBars = np.array(0);
  bars = cBars;
  w=0.1
  for i in range(len(bars)):
    # if i == 1:
    #   bars[i]=[x+w for x in bar0]  
      
    if i>=1:
      bars[i] = [x+w for x in bars[i-1]];
    else:
      bars[i]= bar0;
    for a in range(len(cAcc[i])):
      cPlt.text(bars[i][a],cAcc[i][a],round(cAcc[i][a],2),ha="center",va = "bottom",size=7);

    cPlt.bar(bars[i],cAcc[i],w,label=i+1);
  

  
  cPlt.xticks(bar0,families)
  cPlt.ylim(95,101);
  cPlt.legend(loc  = 'lower right');
  cPlt.show()
  print('------------------------------------')

print(opcodes)
print(len(maxTargetAccuracy[0]))
print(len(maxTargetAccuracy[1]))
print(len(maxTargetAccuracy[2]))
for i in maxTargetAccuracy:
  maxTarget = 0;
  for acr in i:
    if acr>maxTarget:
      maxTarget = acr;
  print(maxTarget)
plt.rcParams['figure.figsize'] = [20, 5]
plt.title("Family");
plt.ylabel("MAX ACCURACY REACHED")
plt.xlabel("PERCENTAGE OF OPCODES")
plt.plot(opcodes,maxTargetAccuracy[0],label = "winwebsec");
plt.plot(opcodes,maxTargetAccuracy[1],label = "zeroacess");
plt.plot(opcodes,maxTargetAccuracy[2],label = 'zbot');

plt.legend()
plt.show();

for datas in dataFiles:
  name = datas;
  data = pd.read_csv(datas);    
  for target in targets:
    data['target'] = target;
    data0 = data[target==0]
    data1 = data[target==1]
    plt.title(name)
    plt.ylabel('target')
    plt.xlabel("Others")
    plt.show()

    plt.scatter(data0["data0"],data0["data8"],color ='red', marker = '.')
    plt.scatter(data1["data0"],data1["data8"],color ='blue', marker = '.')
    plt.scatter(data1["data2"],data1["data10"],color ='blue', marker = '.')
    plt.scatter(data0["data2"],data0["data10"],color ='red', marker = '.')
    plt.scatter(data0["data4"],data0["data12"],color ='red', marker = '.')
    plt.scatter(data0["data5"],data0["data13"],color ='red', marker = '.')
    plt.scatter(data1["data4"],data1["data12"],color ='blue', marker = '.')
    plt.scatter(data1["data5"],data1["data13"],color ='blue', marker = '.')

from sklearn.neighbors import KNeighborsClassifier
  
  
  data = pd.read_csv("data30.csv");

from sklearn import metrics
bestAcc = [];
for data in dataFiles:
  # tuning parameter
  weights = ["uniform","distance"]
  neighbors = 100


  
  dataname = data;
  print("FILE: "+ dataname);
  data = pd.read_csv(data);    

  
  target = data['target'];
  myData = data.drop(['winwebsec','zbot','zeroaccess','target'],axis= 'columns');
  # variables
  bestWeight = ''
  bestK = 1;
  error= []
  wAcc = []
  kAcc = []
  maxAcc = 0;
  kn = []
  for i in range(3,neighbors+3):
    kn.append(i)


  for w in weights:
    KNN = KNeighborsClassifier(n_neighbors = 10, weights = w)
    train_x,test_x, train_y, test_y = train_test_split(myData,target,test_size = 0.2, random_state = 60);
    KNN.fit(train_x,train_y)
    accuracy = KNN.score(test_x,test_y)*100;
    print(w,": ",accuracy);
    

    if accuracy > maxAcc:
      maxAcc = accuracy;
      bestWeight = w;

  for k in kn:
    KNN = KNeighborsClassifier(n_neighbors = k, weights = bestWeight)
    train_x,test_x, train_y, test_y = train_test_split(myData,target,test_size = 0.2, random_state = 60);
    KNN.fit(train_x,train_y)
    accuracy = KNN.score(test_x,test_y)*100;
    kAcc.append(accuracy);


    if accuracy > maxAcc:
      maxAcc = accuracy;
      bestK = k;
  bestAcc.append(maxAcc)
  plt.title("Accuracy of each K");
  plt.ylabel("Accuracy")
  plt.xlabel("Target")
  plt.plot(kn,kAcc,label = dataname)
  plt.legend()



  print(maxAcc," best K: ",bestK," best weight: ",bestWeight)

plt.show()

maxTarget = 0;
for acr in bestAcc:
  if acr>maxTarget:
    maxTarget = acr;
print(maxTarget)
print(bestAcc)
plt.title("Family");
plt.ylabel("MAX ACCURACY REACHED")
plt.xlabel("PERCENTAGE OF OPCODES")
plt.plot(opcodes,bestAcc);

plt.legend()
plt.show();

